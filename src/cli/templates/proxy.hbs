// This file is automatically generated.

import { makeApi, Zodios, type ZodiosOptions } from "@zodios/core";
import { z } from "zod";

{{#if imports}}
{{#each imports}}
import { {{{@key}}} } from "./{{{this}}}"
{{/each}}
{{/if}}


{{#if types}}
{{#each types}}
{{{this}}};
{{/each}}
{{/if}}

{{#each schemas}}
const {{@key}}{{#if (lookup ../emittedType @key)}}: z.ZodType<{{@key}}>{{/if}} = {{{this}}};
{{/each}}

{{#ifNotEmptyObj schemas}}
export const schemas = {
{{#each schemas}}
	{{@key}},
{{/each}}
};
{{/ifNotEmptyObj}}



export const endpoints = makeApi([
{{#each endpoints}}
	{
		method: "{{method}}",
		path: "{{path}}",
		{{#if @root.options.withAlias}}
		{{#if alias}}
		alias: "{{alias}}",
		{{/if}}
		{{/if}}
		{{#if description}}
		description: `{{description}}`,
		{{/if}}
		{{#if requestFormat}}
		requestFormat: "{{requestFormat}}",
		{{/if}}
		{{#if parameters}}
		parameters: [
			{{#each parameters}}
			{
				name: "{{name}}",
				{{#if description}}
				description: `{{description}}`,
				{{/if}}
				{{#if type}}
				type: "{{type}}",
				{{/if}}
				schema: {{{schema}}}
			},
			{{/each}}
		],
		{{/if}}
		response: {{{response}}},
		{{#if errors.length}}
		errors: [
			{{#each errors}}
			{
				{{#ifeq status "default" }}
				status: "default",
				{{else}}
				status: {{status}},
				{{/ifeq}}
				{{#if description}}
				description: `{{description}}`,
				{{/if}}
				schema: {{{schema}}}
			},
			{{/each}}
		]
		{{/if}}
	},
{{/each}}
]);

export const {{options.apiClientName}} = new Zodios({{#if options.baseUrl}}"{{options.baseUrl}}", {{/if}}endpoints);

export function createApiClient(baseUrl: string, options?: ZodiosOptions) {
    return new Zodios(baseUrl, endpoints, options);
}

export const queries = {
{{#each endpoints}}
{{#ifeq method "get"}}
  "{{alias}}": {
    type: "query" as const,
    path: "{{path}}",
    alias: "{{alias}}" as const,
    {{#if description}}
    description: `{{description}}`,
    {{/if}}
    {{#if requestFormat}}
    requestFormat: "{{requestFormat}}",
    {{/if}}
    input: z.object({
      {{#if parameters}}
      params: z.object({
        {{#each parameters}}
        {{#ifeq type "Path"}}
        {{name}}: {{schema}},
        {{/ifeq}}
        {{#ifeq type "Query"}}
        {{name}}: {{schema}},
        {{/ifeq}}
        {{/each}}
      }),
      {{/if}}
      {{#each parameters}}
      {{#ifeq type "Body"}}
      body: {{schema}},
      {{/ifeq}}
      {{/each}}
    }),
    output: {{{response}}},
    {{#if errors.length}}
    errors: [
      {{#each errors}}
      {
        {{#ifeq status "default" }}
        status: "default",
        {{else}}
        status: {{status}},
        {{/ifeq}}
        {{#if description}}
        description: `{{description}}`,
        {{/if}}
        schema: {{{schema}}}
      },
      {{/each}}
    ]
    {{/if}}
  },
{{/ifeq}}
{{/each}}
};

export const mutations = {
{{#each endpoints}}
{{#ifeq method "get"}}
{{else}}
  "{{alias}}": {
    type: "mutation" as const,
    path: "{{path}}",
    alias: "{{alias}}" as const,
    {{#if description}}
    description: `{{description}}`,
    {{/if}}
    {{#if requestFormat}}
    requestFormat: "{{requestFormat}}",
    {{/if}}
    input: z.object({
      {{#if parameters}}
      params: z.object({
        {{#each parameters}}
        {{#ifeq type "Path"}}
        {{name}}: {{schema}},
        {{/ifeq}}
        {{/each}}
      }),
      {{/if}}
      {{#each parameters}}
      {{#ifeq type "Body"}}
      body: {{schema}},
      {{/ifeq}}
      {{/each}}
    }),
    output: {{{response}}},
    {{#if errors.length}}
    errors: [
      {{#each errors}}
      {
        {{#ifeq status "default" }}
        status: "default",
        {{else}}
        status: {{status}},
        {{/ifeq}}
        {{#if description}}
        description: `{{description}}`,
        {{/if}}
        schema: {{{schema}}}
      },
      {{/each}}
    ]
    {{/if}}
  },
{{/ifeq}}
{{/each}}
};



export enum ProcedureKey {
  {{#each endpoints}}
  {{alias}} = "{{alias}}",
  {{/each}}
}